import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription } from "@/components/ui/sheet";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { MessageCircle, Send, X, Bot, User } from "lucide-react";

interface Message {
  id: number;
  text: string;
  sender: "user" | "bot";
  timestamp: Date;
}

export function Chatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω RoomZ. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      sender: "bot",
      timestamp: new Date(),
    },
  ]);

  const suggestedQuestions = [
    "T√¨m ph√≤ng ƒë√£ x√°c th·ª±c g·∫ßn t√¥i",
    "L√†m sao ƒë·ªÉ ƒëƒÉng tin ph√≤ng?",
    "Cho t√¥i bi·∫øt v·ªÅ RoomZ+",
  ];

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: messages.length + 1,
      text: inputValue,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages([...messages, userMessage]);
    setInputValue("");

    // Simulate bot response
    setTimeout(() => {
      const botResponse: Message = {
        id: messages.length + 2,
        text: getBotResponse(inputValue),
        sender: "bot",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botResponse]);
    }, 1000);
  };

  const handleSuggestedQuestion = (question: string) => {
    setInputValue(question);
  };

  const getBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();

    if (input.includes("verified") || input.includes("find") || input.includes("room") || input.includes("x√°c th·ª±c") || input.includes("t√¨m") || input.includes("ph√≤ng")) {
      return "Tuy·ªát v·ªùi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ph√≤ng ƒë√£ x√°c th·ª±c. T·∫•t c·∫£ tin ƒëƒÉng ƒë·ªÅu ƒë∆∞·ª£c x√°c th·ª±c b·∫±ng gi·∫•y t·ªù v√† ·∫£nh 360¬∞. B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm theo ƒë·ªãa ƒëi·ªÉm, gi√°, ho·∫∑c s·ª≠ d·ª•ng t√≠nh nƒÉng ph√π h·ª£p ƒë·ªÉ t√¨m b·∫°n c√πng ph√≤ng ho√†n h·∫£o. B·∫°n c√≥ mu·ªën t√¥i ƒë∆∞a b·∫°n ƒë·∫øn trang t√¨m ki·∫øm kh√¥ng?";
    } else if (input.includes("list") || input.includes("my room") || input.includes("ƒëƒÉng") || input.includes("ph√≤ng c·ªßa t√¥i")) {
      return "ƒê·ªÉ ƒëƒÉng tin ph√≤ng tr√™n RoomZ, b·∫°n c·∫ßn x√°c th·ª±c t√†i kho·∫£n tr∆∞·ªõc. Nh·∫•n 'X√°c th·ª±c' trong menu, ho√†n th√†nh x√°c th·ª±c gi·∫•y t·ªù, sau ƒë√≥ b·∫°n c√≥ th·ªÉ ƒëƒÉng ph√≤ng k√®m ·∫£nh v√† chi ti·∫øt. Tin ƒëƒÉng ƒë√£ x√°c th·ª±c c√≥ l∆∞·ª£t xem g·∫•p 3 l·∫ßn! üè†";
    } else if (input.includes("roomz+") || input.includes("plus") || input.includes("upgrade") || input.includes("n√¢ng c·∫•p")) {
      return "RoomZ+ l√† g√≥i th√†nh vi√™n cao c·∫•p v·ªõi gi√° 200.000ƒë/th√°ng! L·ª£i √≠ch bao g·ªìm:\n\n‚úÖ ∆Øu ti√™n hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm\n‚úÖ Ph√π h·ª£p n√¢ng cao\n‚úÖ Kh√¥ng ph√≠ ƒë·∫∑t ph√≤ng\n‚úÖ ∆Øu ƒë√£i v√† gi·∫£m gi√° ƒë·ªôc quy·ªÅn\n\nB·∫°n c√≥ mu·ªën n√¢ng c·∫•p kh√¥ng?";
    } else if (input.includes("swap") || input.includes("sublet") || input.includes("thu√™ l·∫°i") || input.includes("ho√°n ƒë·ªïi")) {
      return "SwapRoom l√† t√≠nh nƒÉng cho thu√™ linh ho·∫°t! B·∫°n c√≥ th·ªÉ ƒëƒÉng ph√≤ng cho thu√™ ng·∫Øn h·∫°n ho·∫∑c ho√°n ƒë·ªïi v·ªõi sinh vi√™n kh√°c. Ho√†n h·∫£o cho th·ª±c t·∫≠p h√®, du h·ªçc, ho·∫∑c chuy·ªÉn ch·ªó t·∫°m th·ªùi. Xem m·ª•c SwapRoom ƒë·ªÉ b·∫Øt ƒë·∫ßu! üîÑ";
    } else if (input.includes("services") || input.includes("moving") || input.includes("cleaning") || input.includes("d·ªãch v·ª•") || input.includes("chuy·ªÉn nh√†") || input.includes("d·ªçn d·∫πp")) {
      return "Ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• ƒë·ªëi t√°c tin c·∫≠y bao g·ªìm h·ªó tr·ª£ chuy·ªÉn nh√†, d·ªçn ph√≤ng v√† thi·∫øt l·∫≠p. T·∫•t c·∫£ ƒë·ªëi t√°c ƒë·ªÅu ƒë∆∞·ª£c x√°c th·ª±c v√† gi·∫£m gi√° 15% cho sinh vi√™n! Truy c·∫≠p m·ª•c 'D·ªãch v·ª•' ƒë·ªÉ ƒë·∫∑t l·ªãch. üì¶";
    } else if (input.includes("perks") || input.includes("discount") || input.includes("passport") || input.includes("∆∞u ƒë√£i") || input.includes("gi·∫£m gi√°")) {
      return "Th·∫ª ∆Øu ƒë√£i c·ªßa b·∫°n mang l·∫°i c√°c deal ƒë·ªôc quy·ªÅn d√†nh cho sinh vi√™n t·∫°i qu√°n c√† ph√™, ph√≤ng gym, gi·∫∑t l√† v√† nh√† h√†ng g·∫ßn b·∫°n! Gi·∫£m gi√° l√™n ƒë·∫øn 30% t·∫°i c√°c ƒë·ªãa ƒëi·ªÉm ƒë·ªëi t√°c. Xem m·ª•c '∆Øu ƒë√£i' ƒë·ªÉ kh√°m ph√°! üéÅ";
    } else {
      return "T√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n! B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\nüè† T√¨m ph√≤ng ƒë√£ x√°c th·ª±c\nü§ù T√¨m b·∫°n c√πng ph√≤ng ph√π h·ª£p\nüíé L·ª£i √≠ch RoomZ+\nüîÑ Cho thu√™ l·∫°i SwapRoom\nüì¶ D·ªãch v·ª• chuy·ªÉn nh√† & d·ªçn d·∫πp\nüéÅ ∆Øu ƒë√£i ƒë·ªãa ph∆∞∆°ng cho sinh vi√™n\n\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ g√¨?";
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
    });
  };

  return (
    <>
      {/* Floating Chatbot Button */}
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-20 right-4 md:bottom-6 md:right-6 w-14 h-14 rounded-full bg-gradient-to-br from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 shadow-lg z-40 transition-transform hover:scale-110"
        size="icon"
      >
        <MessageCircle className="w-6 h-6 text-white" />
      </Button>

      {/* Chat Panel Overlay */}
      <Sheet open={isOpen} onOpenChange={setIsOpen}>
        <SheetContent
          side="bottom"
          className="h-[85vh] md:h-[600px] md:max-w-md md:right-6 md:left-auto md:bottom-6 md:top-auto rounded-t-3xl md:rounded-3xl p-0 border-0 shadow-2xl"
        >
          <SheetHeader className="p-6 pb-4 border-b border-border bg-gradient-to-r from-primary/5 to-secondary/5">
            <div className="flex items-center gap-3">
              <Avatar className="w-12 h-12 bg-gradient-to-br from-primary to-secondary">
                <AvatarFallback className="bg-transparent">
                  <Bot className="w-6 h-6 text-white" />
                </AvatarFallback>
              </Avatar>
              <div className="flex-1">
                <SheetTitle className="text-left">Tr·ª£ l√Ω RoomZ ü§ñ</SheetTitle>
                <SheetDescription className="text-left text-xs">
                  H·ªèi b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ t√¨m ph√≤ng ho·∫∑c ƒë·ªùi s·ªëng sinh vi√™n
                </SheetDescription>
              </div>
            </div>
          </SheetHeader>

          {/* Chat Messages Area */}
          <div className="flex flex-col h-[calc(100%-140px)] md:h-[calc(100%-160px)]">
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {/* Suggested Questions */}
              {messages.length <= 1 && (
                <div className="space-y-2 mb-4">
                  <p className="text-xs text-muted-foreground text-center">
                    G·ª£i √Ω nhanh:
                  </p>
                  <div className="flex flex-wrap gap-2 justify-center">
                    {suggestedQuestions.map((question, index) => (
                      <Badge
                        key={index}
                        variant="outline"
                        className="cursor-pointer hover:bg-primary/10 hover:text-primary hover:border-primary transition-colors rounded-full px-3 py-1.5"
                        onClick={() => handleSuggestedQuestion(question)}
                      >
                        {question}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}

              {/* Messages */}
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-2 ${
                    message.sender === "user" ? "flex-row-reverse" : "flex-row"
                  }`}
                >
                  {/* Avatar */}
                  <Avatar
                    className={`w-8 h-8 shrink-0 ${
                      message.sender === "bot"
                        ? "bg-gradient-to-br from-primary to-secondary"
                        : "bg-muted"
                    }`}
                  >
                    <AvatarFallback className="bg-transparent">
                      {message.sender === "bot" ? (
                        <Bot className="w-4 h-4 text-white" />
                      ) : (
                        <User className="w-4 h-4 text-foreground" />
                      )}
                    </AvatarFallback>
                  </Avatar>

                  {/* Message Bubble */}
                  <div
                    className={`max-w-[75%] ${
                      message.sender === "user" ? "items-end" : "items-start"
                    } flex flex-col gap-1`}
                  >
                    <div
                      className={`rounded-2xl px-4 py-2.5 ${
                        message.sender === "user"
                          ? "bg-primary text-white rounded-tr-sm"
                          : "bg-muted text-foreground rounded-tl-sm"
                      }`}
                    >
                      <p className="text-sm whitespace-pre-line">{message.text}</p>
                    </div>
                    <span className="text-xs text-muted-foreground px-1">
                      {formatTime(message.timestamp)}
                    </span>
                  </div>
                </div>
              ))}
            </div>

            {/* Input Area */}
            <div className="border-t border-border bg-white p-4">
              <div className="flex items-center gap-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                  className="flex-1 rounded-full border-2 focus-visible:ring-primary bg-muted/50"
                />
                <Button
                  onClick={handleSendMessage}
                  size="icon"
                  className="rounded-full bg-primary hover:bg-primary/90 shrink-0"
                  disabled={!inputValue.trim()}
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
        </SheetContent>
      </Sheet>
    </>
  );
}
