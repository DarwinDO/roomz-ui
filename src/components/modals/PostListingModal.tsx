import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Home, MapPin, DollarSign, Users, Maximize, Camera } from "lucide-react";

interface PostListingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: () => void;
}

export function PostListingModal({ isOpen, onClose, onSubmit }: PostListingModalProps) {
  const [selectedRoomType, setSelectedRoomType] = useState<string | null>(null);
  const [selectedAmenities, setSelectedAmenities] = useState<string[]>([]);

  const roomTypes = [
    { id: "private", label: "Ph√≤ng ri√™ng" },
    { id: "shared", label: "Ph√≤ng chung" },
    { id: "studio", label: "CƒÉn studio" },
    { id: "apartment", label: "Nguy√™n cƒÉn" },
  ];

  const amenities = [
    "WiFi",
    "ƒêi·ªÅu h√≤a",
    "N√≥ng l·∫°nh",
    "T·ªß l·∫°nh",
    "M√°y gi·∫∑t",
    "B·∫øp",
    "Ban c√¥ng",
    "Thang m√°y",
    "B·∫£o v·ªá 24/7",
    "Cho ph√©p th√∫ c∆∞ng",
  ];

  const toggleAmenity = (amenity: string) => {
    setSelectedAmenities((prev) =>
      prev.includes(amenity)
        ? prev.filter((a) => a !== amenity)
        : [...prev, amenity]
    );
  };

  const handleSubmit = () => {
    // TODO: Implement API call to create listing
    onSubmit();
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>ƒêƒÉng tin cho thu√™ ph√≤ng</DialogTitle>
          <DialogDescription>
            ƒêi·ªÅn th√¥ng tin chi ti·∫øt v·ªÅ ph√≤ng c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm ng∆∞·ªùi thu√™ ph√π h·ª£p
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-5 py-4">
          {/* Title */}
          <div className="space-y-2">
            <Label htmlFor="listing-title" className="flex items-center gap-2">
              <Home className="w-4 h-4 text-primary" />
              Ti√™u ƒë·ªÅ tin ƒëƒÉng
            </Label>
            <Input
              id="listing-title"
              placeholder="V√≠ d·ª•: Ph√≤ng tr·ªç ·∫•m c√∫ng g·∫ßn tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch Khoa"
              className="rounded-xl"
            />
          </div>

          {/* Location */}
          <div className="space-y-2">
            <Label htmlFor="location" className="flex items-center gap-2">
              <MapPin className="w-4 h-4 text-primary" />
              ƒê·ªãa ch·ªâ
            </Label>
            <Input
              id="location"
              placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, th√†nh ph·ªë"
              className="rounded-xl"
            />
          </div>

          {/* Room Type */}
          <div className="space-y-2">
            <Label>Lo·∫°i ph√≤ng</Label>
            <div className="flex flex-wrap gap-2">
              {roomTypes.map((type) => (
                <Badge
                  key={type.id}
                  variant={selectedRoomType === type.id ? "default" : "outline"}
                  className={`cursor-pointer px-4 py-2 text-sm ${
                    selectedRoomType === type.id
                      ? "bg-primary text-white"
                      : "hover:bg-primary/10"
                  }`}
                  onClick={() => setSelectedRoomType(type.id)}
                >
                  {type.label}
                </Badge>
              ))}
            </div>
          </div>

          {/* Price and Area */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="price" className="flex items-center gap-2">
                <DollarSign className="w-4 h-4 text-primary" />
                Gi√° thu√™ (VNƒê/th√°ng)
              </Label>
              <Input
                id="price"
                type="number"
                placeholder="3000000"
                className="rounded-xl"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="area" className="flex items-center gap-2">
                <Maximize className="w-4 h-4 text-primary" />
                Di·ªán t√≠ch (m¬≤)
              </Label>
              <Input
                id="area"
                type="number"
                placeholder="25"
                className="rounded-xl"
              />
            </div>
          </div>

          {/* Capacity */}
          <div className="space-y-2">
            <Label htmlFor="capacity" className="flex items-center gap-2">
              <Users className="w-4 h-4 text-primary" />
              S·ªë ng∆∞·ªùi ·ªü t·ªëi ƒëa
            </Label>
            <Select>
              <SelectTrigger className="rounded-xl">
                <SelectValue placeholder="Ch·ªçn s·ªë ng∆∞·ªùi" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1">1 ng∆∞·ªùi</SelectItem>
                <SelectItem value="2">2 ng∆∞·ªùi</SelectItem>
                <SelectItem value="3">3 ng∆∞·ªùi</SelectItem>
                <SelectItem value="4">4 ng∆∞·ªùi</SelectItem>
                <SelectItem value="5">5+ ng∆∞·ªùi</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Amenities */}
          <div className="space-y-2">
            <Label>Ti·ªán nghi</Label>
            <div className="flex flex-wrap gap-2">
              {amenities.map((amenity) => (
                <Badge
                  key={amenity}
                  variant={selectedAmenities.includes(amenity) ? "default" : "outline"}
                  className={`cursor-pointer px-3 py-1.5 text-xs ${
                    selectedAmenities.includes(amenity)
                      ? "bg-secondary text-white"
                      : "hover:bg-secondary/10"
                  }`}
                  onClick={() => toggleAmenity(amenity)}
                >
                  {amenity}
                </Badge>
              ))}
            </div>
          </div>

          {/* Description */}
          <div className="space-y-2">
            <Label htmlFor="description">M√¥ t·∫£ chi ti·∫øt</Label>
            <Textarea
              id="description"
              placeholder="Gi·ªõi thi·ªáu v·ªÅ ph√≤ng tr·ªç, khu v·ª±c xung quanh, quy ƒë·ªãnh chung, v.v..."
              className="rounded-xl min-h-32"
            />
          </div>

          {/* Photos */}
          <div className="space-y-2">
            <Label className="flex items-center gap-2">
              <Camera className="w-4 h-4 text-primary" />
              H√¨nh ·∫£nh ph√≤ng
            </Label>
            <div className="border-2 border-dashed border-border rounded-xl p-8 text-center hover:border-primary transition-colors cursor-pointer">
              <Camera className="w-12 h-12 text-gray-400 mx-auto mb-3" />
              <p className="text-sm text-gray-600 mb-1">
                Nh·∫•p ƒë·ªÉ t·∫£i ·∫£nh l√™n ho·∫∑c k√©o th·∫£ v√†o ƒë√¢y
              </p>
              <p className="text-xs text-gray-500">
                PNG, JPG t·ªëi ƒëa 10MB (T·ªëi thi·ªÉu 3 ·∫£nh)
              </p>
            </div>
          </div>

          {/* Info Notice */}
          <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
            <p className="text-sm text-gray-700">
              üí° <strong>L∆∞u √Ω:</strong> Tin ƒëƒÉng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c xem x√©t v√† ph√™ duy·ªát trong v√≤ng 24 gi·ªù. 
              Ph√≤ng c√≥ x√°c th·ª±c Verified+ s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n hi·ªÉn th·ªã.
            </p>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 pt-2">
            <Button
              onClick={onClose}
              variant="outline"
              className="flex-1 rounded-full h-12"
            >
              H·ªßy
            </Button>
            <Button
              onClick={handleSubmit}
              className="flex-1 bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 rounded-full h-12 text-white"
            >
              <Home className="w-5 h-5 mr-2" />
              ƒêƒÉng tin
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

